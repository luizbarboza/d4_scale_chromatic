import 'package:d4_scale_chromatic/d4_scale_chromatic.dart';
import 'package:test/test.dart';

typedef _Interpolator = String Function(num);
typedef _Scheme = List<List<String>?>;
typedef _SchemeC = List<String>;

void main() {
  test("exports the expected schemes", () {
    expect(interpolateBlues, isA<_Interpolator>());
    expect(interpolateBrBG, isA<_Interpolator>());
    expect(interpolateBuGn, isA<_Interpolator>());
    expect(interpolateBuPu, isA<_Interpolator>());
    expect(interpolateCividis, isA<_Interpolator>());
    expect(interpolateCool, isA<_Interpolator>());
    expect(interpolateCubehelixDefault, isA<_Interpolator>());
    expect(interpolateGnBu, isA<_Interpolator>());
    expect(interpolateGreens, isA<_Interpolator>());
    expect(interpolateGreys, isA<_Interpolator>());
    expect(interpolateInferno, isA<_Interpolator>());
    expect(interpolateMagma, isA<_Interpolator>());
    expect(interpolateOrRd, isA<_Interpolator>());
    expect(interpolateOranges, isA<_Interpolator>());
    expect(interpolatePRGn, isA<_Interpolator>());
    expect(interpolatePiYG, isA<_Interpolator>());
    expect(interpolatePlasma, isA<_Interpolator>());
    expect(interpolatePuBu, isA<_Interpolator>());
    expect(interpolatePuBuGn, isA<_Interpolator>());
    expect(interpolatePuOr, isA<_Interpolator>());
    expect(interpolatePuRd, isA<_Interpolator>());
    expect(interpolatePurples, isA<_Interpolator>());
    expect(interpolateRainbow, isA<_Interpolator>());
    expect(interpolateRdBu, isA<_Interpolator>());
    expect(interpolateRdGy, isA<_Interpolator>());
    expect(interpolateRdPu, isA<_Interpolator>());
    expect(interpolateRdYlBu, isA<_Interpolator>());
    expect(interpolateRdYlGn, isA<_Interpolator>());
    expect(interpolateReds, isA<_Interpolator>());
    expect(interpolateSinebow, isA<_Interpolator>());
    expect(interpolateSpectral, isA<_Interpolator>());
    expect(interpolateTurbo, isA<_Interpolator>());
    expect(interpolateViridis, isA<_Interpolator>());
    expect(interpolateWarm, isA<_Interpolator>());
    expect(interpolateYlGn, isA<_Interpolator>());
    expect(interpolateYlGnBu, isA<_Interpolator>());
    expect(interpolateYlOrBr, isA<_Interpolator>());
    expect(interpolateYlOrRd, isA<_Interpolator>());
    expect(schemeAccent, isA<_SchemeC>());
    expect(schemeBlues, isA<_Scheme>());
    expect(schemeBrBG, isA<_Scheme>());
    expect(schemeBuGn, isA<_Scheme>());
    expect(schemeBuPu, isA<_Scheme>());
    expect(schemeCategory10, isA<_SchemeC>());
    expect(schemeDark2, isA<_SchemeC>());
    expect(schemeGnBu, isA<_Scheme>());
    expect(schemeGreens, isA<_Scheme>());
    expect(schemeGreys, isA<_Scheme>());
    expect(schemeOrRd, isA<_Scheme>());
    expect(schemeOranges, isA<_Scheme>());
    expect(schemePRGn, isA<_Scheme>());
    expect(schemePaired, isA<_SchemeC>());
    expect(schemePastel1, isA<_SchemeC>());
    expect(schemePastel2, isA<_SchemeC>());
    expect(schemePiYG, isA<_Scheme>());
    expect(schemePuBu, isA<_Scheme>());
    expect(schemePuBuGn, isA<_Scheme>());
    expect(schemePuOr, isA<_Scheme>());
    expect(schemePuRd, isA<_Scheme>());
    expect(schemePurples, isA<_Scheme>());
    expect(schemeRdBu, isA<_Scheme>());
    expect(schemeRdGy, isA<_Scheme>());
    expect(schemeRdPu, isA<_Scheme>());
    expect(schemeRdYlBu, isA<_Scheme>());
    expect(schemeRdYlGn, isA<_Scheme>());
    expect(schemeReds, isA<_Scheme>());
    expect(schemeSet1, isA<_SchemeC>());
    expect(schemeSet2, isA<_SchemeC>());
    expect(schemeSet3, isA<_SchemeC>());
    expect(schemeSpectral, isA<_Scheme>());
    expect(schemeTableau10, isA<_SchemeC>());
    expect(schemeYlGn, isA<_Scheme>());
    expect(schemeYlGnBu, isA<_Scheme>());
    expect(schemeYlOrBr, isA<_Scheme>());
    expect(schemeYlOrRd, isA<_Scheme>());
  });
}
